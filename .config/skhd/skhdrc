# -- Changing Window Focus --

# # change window focus within space
# alt - j : yabai -m window --focus south
# alt - k : yabai -m window --focus north
# alt - h : yabai -m window --focus west
# alt - l : yabai -m window --focus east
cmd - h : yabai -m window --focus west
cmd - j : yabai -m window --focus south
cmd - l : yabai -m window --focus east
cmd - k : yabai -m window --focus north

#change focus between external displays (left and right)
# alt - s: yabai -m display --focus west
# alt - g: yabai -m display --focus east

# -- Modifying the Layout --
#
# # rotate layout clockwise
shift + cmd - r : yabai -m space --rotate 270
#
# # flip along y-axis
shift + cmd - y : yabai -m space --mirror x-axis
#
# # flip along x-axis
shift + cmd - x : yabai -m space --mirror y-axis

# # toggle window float
shift + cmd - t : yabai -m window --toggle float --grid 4:4:1:1:2:2
#
#
# # -- Modifying Window Size --
#
# # maximize a window
shift + cmd - m : yabai -m window --toggle zoom-fullscreen
#
# # balance out tree of windows (resize to occupy same area)
shift + cmd - e : yabai -m space --balance
#
# # -- Moving Windows Around --
#
# # swap windows
shift + cmd - j : yabai -m window --swap south
shift + cmd - k : yabai -m window --swap north
shift + cmd - h : yabai -m window --swap west
shift + cmd - l : yabai -m window --swap east
#
# # move window and split
ctrl + cmd - j : yabai -m window --warp south
ctrl + cmd - k : yabai -m window --warp north
ctrl + cmd - h : yabai -m window --warp west
ctrl + cmd - l : yabai -m window --warp east
#
# # move window to display left and right
# shift + alt - s : yabai -m window --display west; yabai -m display --focus west;
# shift + alt - g : yabai -m window --display east; yabai -m display --focus east;
#
#
# # move window to prev and next space
# shift + cmd - p : yabai -m window --space prev;
# shift + cmd - n : yabai -m window --space next;
#
# # move window to space #
shift + cmd - 1 : yabai -m window --space 1;
shift + cmd - 2 : yabai -m window --space 2;
shift + cmd - 3 : yabai -m window --space 3;
shift + cmd - 4 : yabai -m window --space 4;
shift + cmd - 5 : yabai -m window --space 5;
shift + cmd - 6 : yabai -m window --space 6;
shift + cmd - 7 : yabai -m window --space 7;
#
# # -- Starting/Stopping/Restarting Yabai --
#
# # stop/start/restart yabai
ctrl + alt - q : yabai --stop-service
ctrl + alt - s : yabai --start-service
ctrl + alt - r : yabai --restart-service
#

#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
cmd - return : /Applications/Alacritty.app/Contents/MacOS/alacritty --single-instance -d ~
# cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~

# open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# open mpv
# cmd - m : open -na /Applications/mpv.app $(pbpaste)
